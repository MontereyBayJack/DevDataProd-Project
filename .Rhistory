casualties$EventType[1:10])
hcEvents
topEvents <- hc[,which(EventType %in% hcEvents)]
topEvents <- hc[,which(hc$EventType %in% hcEvents)]
topEvents <- hc[which(hc$EventType %in% hcEvents),]
topEvents
summary(topEvents)
group_by(hcEvents, EventType)
group_by(topEvents, EventType)
te <- summarise(topEvents, sumFatalities=sum(Fatalities)sumInjuries=sum(Injuries), sumCasualties = sum(Casualties))
te <- summarise(topEvents, sumFatalities=sum(Fatalities),
sumInjuries=sum(Injuries), sumCasualties = sum(Casualties))
te
te <- arrante(te,desc(Fatalties))
te <- arrange(te,desc(Fatalties))
te <- summarise(topEvents, totFatalities=sum(Fatalities),
totInjuries=sum(Injuries), totCasualties = sum(Casualties))
te <- arrange(te,desc(totFatalties))
te <- arrange(te,desc(totFatalities))
te
barchart(totFatalities | EventType, data=te,
main="barchart",
scales=list(cex=0.5),
)
library(lattice)
barchart(totFatalities | EventType, data=te,
main="barchart",
scales=list(cex=0.5),
)
te
barchart(totFatalities ~ EventType, data=te,
main="barchart",
scales=list(cex=0.5),
)
barchart(totFatalities, TotInjuries ~ EventType, data=te,
main="barchart",
scales=list(cex=0.5),
)
data(mtcars)
summary(mtcars)
barchart(c(totFatalities,totInjuries) ~ EventType, data=te,
main="barchart",
scales=list(cex=0.5),
)
barchart(r(totFatalities,totInjuries) ~ EventType, data=te,
main="barchart",
scales=list(cex=0.5),
)
barchart((totFatalities,totInjuries) ~ EventType, data=te,
te
te %>% gather(totFatalities, totalInjuries, totCasualties)
library(tidyr)
install.packages("tidyr")
te %>% gather(totFatalities, totalInjuries, totCasualties)
library(dplyr)
te %>% gather(totFatalities, totalInjuries, totCasualties)
te
te %>% gather(type,total,totFatalities:totCasualties)
?gather
?melt
library(plyr)
?melt
library(reshape2)
te <- melt(,te, id.vars="EventType",
measure.vars=c("totFatalities", "totInjuries", "totCasualties"))
te <- melt(te, id.vars="EventType",
measure.vars=c("totFatalities", "totInjuries", "totCasualties"))
te
barchart( value ~ eventType, data=mtcars, groups=variable, stack=F, horizontal=F, auto.key=T )
barchart(value ~ eventType, data=mtcars, stack=F, horizontal=F, auto.key=T )
barchart(value ~ eventType, data=te, groups=variable, stack=F, horizontal=F, auto.key=T )
barchart(value ~ EventType, data=te, groups=variable, stack=F, horizontal=F, auto.key=T )
?melt
te <- melt(te, id.vars="EventType",
measure.vars=c("totFatalities", "totInjuries", "totCasualties"
value.name="Total Number"))
te <- melt(te, id.vars="EventType",
measure.vars=c("totFatalities", "totInjuries", "totCasualties")
value.name="Total Number")
te <- summarise(topEvents, totFatalities=sum(Fatalities),
totInjuries=sum(Injuries), totCasualties = sum(Casualties))
te <- arrange(te,desc(totFatalities))
library(reshape2)
te <- melt(te, id.vars="EventType",
measure.vars=c("totFatalities", "totInjuries", "totCasualties")
value.name="Total Number")
te <- melt(te, id.vars="EventType",
measure.vars=c("totFatalities", "totInjuries", "totCasualties"),
value.name="Total Number")
te <- summarise(topEvents, totFatalities=sum(Fatalities),
totInjuries=sum(Injuries), totCasualties = sum(Casualties))
te <- arrange(te,desc(totFatalities))
te <- rename(te,Fatalities=totFatalities,Injuries=totInjuries
,Casualties=totCasualties)
hcEvents <-
intersect(fatalities$EventType[1:10], injuries$EventType[1:10])
hcEvents
topEvents <- hc[which(hc$EventType %in% hcEvents),]
topEvents <- group_by(topEvents, EventType)
te <- summarise(topEvents, totFatalities=sum(Fatalities),
totInjuries=sum(Injuries), totCasualties = sum(Casualties))
te <- arrange(te,desc(totFatalities))
te <- rename(te,Fatalities=totFatalities,Injuries=totInjuries
,Casualties=totCasualties)
te
hcEvents
topEvents <- hc[which(hc$EventType %in% hcEvents),]
topEvents
topEvents <- group_by(topEvents, EventType)
te <- summarise(topEvents, totFatalities=sum(Fatalities),
totInjuries=sum(Injuries), totCasualties = sum(Casualties))
te
```{r}
# Get data for human cost analysis.
hc <- read.csv("./human-cost.csv", stringsAsFactors=TRUE)
# Use dplyr package to prepare and manipulate the data for anlaylsis.
library(dplyr)
hc <- tbl_df(hc)
```
Check for missing data (all zeros means none missing).
Summarize the data for human cost analysis.
```{r}
colSums(is.na(hc))
summary(hc)
```
### Human Costs
Focus on fatalities.
```{r}
hcf <- filter(hc, Fatalities>0)
hcf <- group_by(hcf,EventType)
summary(hcf)
```
Determine the event in each event type that produced the most fatalities.
```{r}
# Which event type produces the maximum single fatal event?
arrange(summarise(hcf,maxFatalities = max(Fatalities)),desc(maxFatalities))
```
A single HEAT event produced 583 casualties. The five event types with most casualties per event with greatest casualties are HEAT, TORNADO, EXCESSIVE HEAT, EXTREME HEAT, and HEAT WAVE in that order. Notice that four of the five categories are heat related indicating that more extensive analysis including reducing similar event types to a common catagory is probably appropriate.
Determine total fatalities in the record for each event type. List the top ten event types by total fatalities with the total.
```{r}
fatalities <- arrange(summarise(hcf,totFatalities = sum(Fatalities)),
desc(totFatalities))
fatalities
```
Tornados produced 5,633 fatalities. The top five are TORNADO, EXCESSIVE HEAT, FLASH FLOOD, HEAT and LIGHTNING.
Focus on Injuries.
```{r}
hci <- filter(hc, Injuries>0)
hci <- group_by(hci,EventType)
summary(hci)
```
Determine the event in each event type that produced the most injuries.
```{r}
# Which event type produces the maximum single injury event?
arrange(summarise(hci,maxInjuries = max(Injuries)),desc(maxInjuries))
```
A single TORNADO event produced 1700 injuries. The five event types with most casualties per event with greatest casualties are TORNADO, ICE STORM, FLOOD, HURRICANE/TYPHOON, and EXCESSIVE HEAT in that order.
Determine total injuries in the record for each event type. List the top ten event types by total injuries with the total.
```{r}
injuries <- arrange(summarise(hci,totInjuries = sum(Injuries)),
desc(totInjuries))
injuries
```
TORNADO events produced a total of 91,346 fatalities. The top five are TORNADO, TSTM WIND, FLOOD, EXCESSIVE HEAT, and LIGHTNING.
Determine total casualties in the record for each event type. List the top ten event types by total casualties with the total.
```{r}
hc <- group_by(hc,EventType)
casualties <- arrange(summarise(hc,sumCasualties = sum(Casualties)),
desc(sumCasualties))
casualties
```
The top casualty producing storm event type in terms of both fataliteis and injuries is TORNADO, which is also the most common casualty producing event. The top 5 caualty producing storm event types are TORNADO, EXCESSIVE HEAT, TSTM WIND, FLOOD, and LIGHTNING. TORNADO and EXCESSIVE HEAT are the top two for fatalities. LIGHTNING also makes both lists.
hc <- read.csv("./human-cost.csv", stringsAsFactors=TRUE)
# Use dplyr package to prepare and manipulate the data for anlaylsis.
library(dplyr)
hc <- tbl_df(hc)
colSums(is.na(hc))
summary(hc)
hcf <- filter(hc, Fatalities>0)
hcf <- group_by(hcf,EventType)
summary(hcf)
arrange(summarise(hcf,maxFatalities = max(Fatalities)),desc(maxFatalities))
?group_by
head(hcf)
?summarise
summarise(mtcars, mean(disp))
summarise(group_by(mtcars, cyl), mean(disp))
?melt
library(reshape2)
?melt
barchart(Total ~ EventType, data=te, groups=variable, stack=F, horizontal=F, auto.key=T, main="Most Costly Storm Event Types (Human Cost)"
library(dplyr)
ec <- read.csv("./economic-cost.csv", stringsAsFactors=TRUE)
ec <- tbl_df(ec)
library(dplyr)
ec <- read.csv("./economic-cost.csv", stringsAsFactors=TRUE)
ec <- tbl_df(ec)
colSums(is.na(ec))
summary(ec)
source('C:/Users/lajackso/RepData2/prep-data-script.R')
# keep only columns relevant for the analysis and drop the others.
library(dplyr)
ec <- read.csv("./economic-cost.csv", stringsAsFactors=TRUE)
ec <- tbl_df(ec)
colSums(is.na(ec))
summary(ec)
summary(ec[TotalCost>0,])
summary(ec[dc$TotalCost>0,])
summary(ec[ec$TotalCost>0,])
ec <- d["PropertyDamage">0|"CropDamage">0,]
ec <- select(ec, -Fatalities, -Injuries)
ec <- mutate(ec, TotalCost=PropertyDamage+CropDamage)
write.csv(ec,file="economic-cost.csv")
source('C:/Users/lajackso/RepData2/prep-data-script.R')
library(dplyr)
ec <- read.csv("./economic-cost.csv", stringsAsFactors=TRUE)
ec <- tbl_df(ec)
colSums(is.na(ec))
summary(ec)
ec <- d["PropertyDamage">0|"CropDamage">0,]
summary(ec)
source('C:/Users/lajackso/RepData2/prep-data-script.R')
summary(ec)
library(dplyr)
ec <- read.csv("./economic-cost.csv", stringsAsFactors=TRUE)
ec <- tbl_df(ec)
colSums(is.na(ec))
summary(ec)
ec <- group_by(ec,EventType)
cost <- arrange(summarise(ec,sumTotalCost = sum(TotalCost)),
desc(sumTotalCost))
cost
ec <- group_by(ec,EventType)
pd <- arrange(summarise(ec,sumPropertyDamage = sum(PropertyDamage)),
desc(sumPropertyDamage))
pd
ec <- group_by(ec,EventType)
cd <- arrange(summarise(ec,sumCropDamage = sum(CropDamage)),
desc(sumCropDamage))
cd
?sprintf
sprintf(" %3.2f", cd$sumCropDamage[5])
sprintf("$ %3.2f", cd$sumCropDamage[5])
prettyNum(cd$sumCropDamage[1:5],big.mark=",",scientific=FALSE)
?prettyNum
cd$sumCropDamage <- prettyNum(cd$sumCropDamage,big.mark=",",scientific=FALSE)
cd
pd$sumPropertyDamage <- prettyNum(pd$sumPropertyDamage,big.mark=",",scientific=FALSE)
pd
ed$sumTotalCost <- prettyNum(cd$sumTotalCost,big.mark=",",scientific=FALSE)
ed$sumTotalCost <- prettyNum(ed$sumTotalCost,big.mark=",",scientific=FALSE)
cd$sumTotalCost <- prettyNum(ed$sumTotalCost,big.mark=",",scientific=FALSE)
ccost$sumTotalCost <- prettyNum(cost$sumTotalCost,big.mark=",",scientific=FALSE)
cost$sumTotalCost <- prettyNum(cost$sumTotalCost,big.mark=",",scientific=FALSE)
cost
```{r}
ecEvents <-
intersect(pd$EventType[1:10], cd$EventType[1:10])
ecEvents
ecEvents <-
intersect(pd$EventType[1:10], cd$EventType[1:10])
ecEvents
topEvents <- ec[which(ec$EventType %in% hcEvents),]
topEvents <- group_by(topEvents, EventType)
te <- summarise(topEvents, PropertyDamage=sum(PropertyDamage),
CropoDamage=sum(CropDamage),
TotalDamage = sum(TotalDamage))
ecEvents <-
intersect(pd$EventType[1:10], cd$EventType[1:10])
ecEvents
topEvents <- ec[which(ec$EventType %in% hcEvents),]
topEvents <- group_by(topEvents, EventType)
topEvents <- ec[which(ec$EventType %in% ecEvents),]
topEvents <- group_by(topEvents, EventType)
te <- summarise(topEvents, PropertyDamage=sum(PropertyDamage),
CropoDamage=sum(CropDamage),
TotalDamage = sum(TotalDamage))
names(topEvents)
te <- summarise(topEvents, PropertyDamage=sum(PropertyDamage),
CropDamage=sum(CropDamage),
TotalCost = sum(TotalCost))
te <- melt(te, id="EventType",
measure=c("PropertyDamage", "CropDamage", "TotalCost"),
value.name="Total")
library(lattice)
barchart(Total ~ EventType, data=te, groups=variable, stack=F, horizontal=F, auto.key=T, main="Most Costly Storm Event Types (Economic Cost)")
te <- melt(te, id="EventType",
measure=c("PropertyDamage", "CropDamage"),
value.name="Total")
library(lattice)
barchart(Total ~ EventType, data=te, groups=variable, stack=F, horizontal=F, auto.key=T, main="Most Costly Storm Event Types (Economic Cost)")
ecEvents <-
intersect(pd$EventType[1:10], cd$EventType[1:10])
ecEvents
topEvents <- ec[which(ec$EventType %in% ecEvents),]
topEvents <- group_by(topEvents, EventType)
te <- summarise(topEvents, PropertyDamage=sum(PropertyDamage),
CropDamage=sum(CropDamage))
library(reshape2)
te <- melt(te, id="EventType",
measure=c("PropertyDamage", "CropDamage"),
value.name="Total")
library(lattice)
barchart(Total ~ EventType, data=te, groups=variable, stack=F, horizontal=F, auto.key=T, main="Most Costly Storm Event Types (Economic Cost)")
hcEvents <-
intersect(fatalities$EventType[1:10], injuries$EventType[1:10])
hcEvents
topEvents <- hc[which(hc$EventType %in% hcEvents),]
topEvents <- group_by(topEvents, EventType)
te <- summarise(topEvents, Fatalities=sum(Fatalities),
Injuries=sum(Injuries))
library(reshape2)
te <- melt(te, id="EventType",
measure=c("Fatalities", "Injuries"),
value.name="Total")
library(lattice)
barchart(Total ~ EventType, data=te, groups=variable, stack=F, horizontal=F, auto.key=T, main="Most Costly Storm Event Types (Human Cost)")
hcEvents <-
intersect(fatalities$EventType[1:10], injuries$EventType[1:10])
hcEvents
topEvents <- hc[which(hc$EventType %in% hcEvents),]
topEvents <- group_by(topEvents, EventType)
te <- summarise(topEvents, Fatalities=sum(Fatalities),
Injuries=sum(Injuries))
barchart(Total ~ EventType, data=te, groups=variable, stack=F, horizontal=F, auto.key=T, main="Most Costly Storm Event Types (Economic Cost)",scales=list(cex=0.75))
barchart(Total ~ EventType, data=te, groups=variable, stack=F, horizontal=F, auto.key=T, main="Most Costly Storm Event Types (Economic Cost)",scales=list(cex=0.75),ylim=c(0,max(te$PropertyDamage)))
pd
barchart(Total ~ EventType, data=te, groups=variable, stack=F, horizontal=F, auto.key=T, main="Most Costly Storm Event Types (Economic Cost)",scales=list(cex=0.75),ylim=c(0,150000000000))
casualties
hc <- group_by(hc,EventType)
casualties <- arrange(summarise(hc,sumCasualties = sum(Casualties)),
desc(sumCasualties))
casualties
source('C:/Users/lajackso/getData/run_analysis.R')
source('C:/Users/lajackso/getData/run_analysis.R')
setwd("c:/Users/lajacks/GetData")
getwd()
setwd("c:/Users/lajackso/GetData")
source('C:/Users/lajackso/getData/run_analysis.R')
source('C:/Users/lajackso/getData/run_analysis.R')
source('C:/Users/lajackso/getData/run_analysis.R')
cnames
names(d)
setNames(d,cnames)
names(d)
library(data.table)
setnames(d,cnames)
names(d)
source('C:/Users/lajackso/getData/run_analysis.R')
source('C:/Users/lajackso/getData/run_analysis.R')
library(MASS)
library(ISLR)
install.packages("ISLR")
library(ISLR)
names(Boston)
?Boston
plot(medv-lstat,data-Boston)
plot(medv~lstat,data-Boston)
plot(medv~lstat,data=Boston)
fit=lm(medv~lstat,data=Boston)
?MASS
fit1=lm(medv~lstat,data=Boston)
fit1
summary(fit1)
abline(fit1,col="red")
names(fit1)
fit1$model
confint(fit1)
predict(fit1,data.frame(lstat=c(5,10,15)),interval="confidence")
fit2=lm(mdev~lstat+age,data=Boston)
fit2=lm(medv~lstat+age,data=Boston)
summary(fit2)
fit3=lm(medv~.data=Boston)
fit3=lm(medv~.,data=Boston)
summary(fit3)
par(mfrom=c(2,2))
par(mfrow=c(2,2))
plot(fit3)
fit4=update(fit3,~.-age-indus)
summary(fit4)
plot(fit4)
fit6=lm(mdev~lstat +I(lstat^2),Boston)
fit6=lm(medv~lstat+I(lstat^2),Boston)
summary(fit6)
fit5=lm(medv~lstat*age,Boston)
summary(fit5)
fit6=lm(medv~lstat+I(lstat^2),Boston)
summary(fit6)
attach(Boston)
par(mfrow-c(1,1))
plot(mdev~lstat)
par(mfrow=c(1,1))
plot(mdev~lstat)
plot(medv~lstat)
points(lstat,fitted(fit6),col="red",pch=20
)
points(lstat,fitted(fit5),col="blue",pch=20)
points(lstat,fitted(fit7),col="green",pch=20)
fit7=lm(medv~poly(lstat,4))
points(lstat,fitted(fit7),col="green",pch=20)
plot(1:20,1:20,pch=1:20,cex=2)
fix(Carseats)
names(Carseats)
summary(Carseats)
names(Carseats)
summary(Carseats)
fit1=lm(Sales~.+Income:Advertising+Age:Price,Carseats)
summary(fit1)
contrasts(Carsets$shelveLoc)
contrasts(Carsets$ShelveLoc)
contrasts(Carseats$ShelveLoc)
?contrasts
regplot(Price,Sales)
regplot=function(x,y){
fit=lm(y~x)
plot(x,y)
abline(fit,col="red")
}
regplot(Price,Sales)
regplot(Price,Sales)
attach(Carseats)
regplot(Price,Sales)
regplot(Price,Sales,xlab="Price",ylab="Sales",col="blue",pch=20)
regplot=function(x,y,...){
fit=lm(y~x)
plot(x,y)
abline(fit,col="red")
}
regplot(Price,Sales,xlab="Price",ylab="Sales",col="blue",pch=20)
regplot=function(x,y,...){
fit=lm(y~x)
plot(x,y)
abline(fit,col="red")
}
regplot(Price,Sales,xlab="Price",ylab="Sales",col="blue",pch=20)
attach(Carseats)
regplot=function(x,y,...){
fit=lm(y~x)
plot(x,y)
abline(fit,col="red")
}
regplot(Price,Sales,xlab="Price",ylab="Sales",col="blue",pch=20)
regplot=function(x,y,...){
fit=lm(y~x)
plot(x,y,...)
abline(fit,col="red")
}
regplot(Price,Sales,xlab="Price",ylab="Sales",col="blue",pch=20)
library(igraph)
# read the edges as a list vertex pairs (from1,to1,from2,to2,..).
d <- "~/DataScienceFiles/"
fileRef <- paste(d,"testPERTarcs.csv",sep="")
arcDat <- read.csv(fileRef)
fileRef <- paste(d,"testPERTnodes.csv",sep="")
nodeDat <- read.csv(fileRef)
# create the directed graph from the edges
order <- max(arcDat$vertices)
g <- graph(arcDat$vertices, order, directed=TRUE)
V(g)$name <- nodeDat$nodeName
install.packages("igraph")
library(igraph)
g <- graph(arcDat$vertices, order, directed=TRUE)
V(g)$name <- nodeDat$nodeName
V(g)$expected <- nodeDat$duration
V(g)$min <- nodeDat$min
V(g)$max <- nodeDat$max
E(g)$weight <- V(g)[get.edges(g, E(g))[,1]]$duration
library(shiny)
setwd("C:/Users/lajackso/DevDataProd")
runApp("project") #, display.mode = "showcase")
runApp("project") #, display.mode = "showcase")
runApp("project") #, display.mode = "showcase")
runApp("project") #, display.mode = "showcase")
runApp("project") #, display.mode = "showcase")
runApp("project") #, display.mode = "showcase")
runApp("project") #, display.mode = "showcase")
runApp("project") #, display.mode = "showcase")
runApp("project") #, display.mode = "showcase")
runApp("project") #, display.mode = "showcase")
runApp("project") #, display.mode = "showcase")
runApp("project") #, display.mode = "showcase")
shiny::runApp('project')
shiny::runApp('project')
shiny::runApp('project')
shiny::runApp('project')
shiny::runApp('project')
shiny::runApp('project')
publish(title = 'Sample Means App', 'index.html', host = 'rpubs')
package(slidify)
library(slidify)
library(Slidify)
install.packages("Slidify")
install.packages("slidify")
library(devtools)
install_github('slidify', 'ramnathv')
install_github('slidifyLibraries', 'ramnathv')
install.packages("devtools")
install_github('slidify', 'ramnathv')
library(devtools)
install_github('slidify', 'ramnathv')
install_github('slidifyLibraries', 'ramnathv')
publish(title = 'Sample Means App', 'index.html', host = 'rpubs')
Develop Data Products Sample Means App
setwd("C:/Users/lajackso/DevDataProd/project")
publish(title = 'Sample Means App', 'index.html', host = 'rpubs')
library(slidify)
?publish
publish(title = 'Sample Means App', 'index.html', host = 'rpubs')
publish(title = 'Sample Means App', 'AppPitch.html', host = 'rpubs')
publish(title = 'Sample Means App', 'AppPitch.html', host = 'rpubs')
publish_rpubs(title = 'Sample Means App', html_file='AppPitch.html')
install.packages(c("manipulate", "plyr", "Rcpp", "rmarkdown", "shiny"))
